--- USE CAPS!!! CASE SENSITIVE 
--FROM production.denormalised.orders
SELECT ORDINAL_POSITION, 
       COLUMN_NAME, 
       DATA_TYPE, 
       IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'ORDERS'
AND TABLE_SCHEMA = 'DENORMALISED'
ORDER BY ORDINAL_POSITION;

--FROM PRODUCTION.RIDERS.RIDER_LIFECYCLE_LATEST_STATUS

SELECT ORDINAL_POSITION, 
       COLUMN_NAME, 
       DATA_TYPE, 
       IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'RIDER_LIFECYCLE_LATEST_STATUS'
AND TABLE_SCHEMA = 'RIDERS'
ORDER BY ORDINAL_POSITION;

--FROM production.denormalised.driver_accounting_daily

SELECT ORDINAL_POSITION, 
       COLUMN_NAME, 
       DATA_TYPE, 
       IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'DRIVER_ACCOUNTING_DAILY'
AND TABLE_SCHEMA = 'DENORMALISED'
ORDER BY ORDINAL_POSITION;

select *
FROM production.denormalised.driver_accounting_daily
limit 10;

--FROM production.denormalised.driver_accounting_daily
SELECT ORDINAL_POSITION, 
       COLUMN_NAME, 
       DATA_TYPE, 
       IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'DRIVER_ACCOUNTING_DAILY'
AND TABLE_SCHEMA = 'DENORMALISED'
ORDER BY ORDINAL_POSITION;

--production.reference.city_detailed

SELECT ORDINAL_POSITION, 
       COLUMN_NAME, 
       DATA_TYPE, 
       IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'CITY_DETAILED'
AND TABLE_SCHEMA = 'REFERENCE'
ORDER BY ORDINAL_POSITION;

-- PRODUCTION.REFERENCE.ZONE_CITY_COUNTRY

SELECT ORDINAL_POSITION, 
       COLUMN_NAME, 
       DATA_TYPE, 
       IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'ZONE_CITY_COUNTRY'
AND TABLE_SCHEMA = 'REFERENCE'
ORDER BY ORDINAL_POSITION;

-- scratch.riders.zone_drn_id_to_onboarding_area

SELECT ORDINAL_POSITION, 
       COLUMN_NAME, 
       DATA_TYPE, 
       IS_NULLABLE
FROM SCRATCH.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'ZONE_DRN_ID_TO_ONBOARDING_AREA'
AND TABLE_SCHEMA = 'RIDERS'
ORDER BY ORDINAL_POSITION;

SELECT *
FROM scratch.riders.zone_drn_id_to_onboarding_area
where city_name = 'London' and
country_name = 'UK'
order by city_name, city_detailed
;

--  PRODUCTION.DENORMALISED.CAMPAIGN_MANAGER

SELECT ORDINAL_POSITION,
       COLUMN_NAME,
       DATA_TYPE,           
       IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'CAMPAIGN_MANAGER'
AND TABLE_SCHEMA = 'DENORMALISED'
ORDER BY ORDINAL_POSITION;

-- FROM SCRATCH.RIDERS.ZONE_DRN_ID_TO_ONBOARDING_AREA
SELECT ORDINAL_POSITION,
COLUMN_NAME,
DATA_TYPE,
IS_NULLABLE
FROM SCRATCH.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'ZONE_DRN_ID_TO_ONBOARDING_AREA'
AND TABLE_SCHEMA = 'RIDERS'
ORDER BY ORDINAL_POSITION;

-- FROM PRODUCTION.AGGREGATE.AGG_ZONE_DELIVERY_METRICS_HOURLY 
SELECT ORDINAL_POSITION,
COLUMN_NAME,
DATA_TYPE,
IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'AGG_ZONE_DELIVERY_METRICS_HOURLY'
AND TABLE_SCHEMA = 'AGGREGATE'
ORDER BY ORDINAL_POSITION;


-- PRODUCTION.BRAZE.RIDER_ENGAGEMENT

SELECT ORDINAL_POSITION, COLUMN_NAME, DATA_TYPE, IS_NULLABLE
FROM PRODUCTION.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RIDER_ENGAGEMENT' AND TABLE_SCHEMA = 'BRAZE' ORDER BY ORDINAL_POSITION;


















        WITH city_list AS (
            SELECT
                B.ONBOARDING_AREA,
                MEDIAN(CENTROID_GEO_LAT) AS GEO_LAT, 
                MEDIAN(CENTROID_GEO_LONG) AS GEO_LONG
            FROM PRODUCTION.REFERENCE.ZONE_CITY_COUNTRY A 
            LEFT JOIN scratch.riders.zone_drn_id_to_onboarding_area B ON A.zone_code = B.ZONE_CODE
            WHERE A.COUNTRY_NAME IN ('France', 'Italy', 'Belgium', 'UK', 'Ireland')
                AND B.ONBOARDING_AREA IS NOT NULL
            GROUP BY B.ONBOARDING_AREA
            ORDER BY B.ONBOARDING_AREA
        )
        SELECT 
            A.ONBOARDING_AREA || B.ONBOARDING_AREA AS CITY_DETAILED_COMBO,
            A.ONBOARDING_AREA AS CITY_DETAILED_1, 
            B.ONBOARDING_AREA AS CITY_DETAILED_2,
            A.GEO_LAT AS CITY_DETAILED_1_LAT,
            A.GEO_LONG AS CITY_DETAILED_1_LONG,
            B.GEO_LAT AS CITY_DETAILED_2_LAT,
            B.GEO_LONG AS CITY_DETAILED_2_LONG,
            ROUND(haversine(A.GEO_LAT, A.GEO_LONG, B.GEO_LAT, B.GEO_LONG), 0) AS DISTANCE_KM,
            CASE WHEN ROUND(haversine(A.GEO_LAT, A.GEO_LONG, B.GEO_LAT, B.GEO_LONG), 0) > 20 THEN 'FAR'
                ELSE 'NEAR'
            END AS DISTANCE_CATEGORY 
        FROM city_list A
        CROSS JOIN city_list B
        WHERE A.ONBOARDING_AREA LIKE 'London%'
                AND B.ONBOARDING_AREA LIKE 'London%'
        ORDER BY CITY_DETAILED_1, CITY_DETAILED_2
        
        ;

CREATE OR REPLACE TEMPORARY TABLE CITY_DISTANCES AS (
        WITH city_list AS (
            SELECT
                B.ONBOARDING_AREA,
                MEDIAN(CENTROID_GEO_LAT) AS GEO_LAT, 
                MEDIAN(CENTROID_GEO_LONG) AS GEO_LONG
            FROM PRODUCTION.REFERENCE.ZONE_CITY_COUNTRY A 
            LEFT JOIN scratch.riders.zone_drn_id_to_onboarding_area B ON A.zone_code = B.ZONE_CODE
            WHERE A.COUNTRY_NAME IN ('France', 'Italy', 'Belgium', 'UK', 'Ireland')
                AND B.ONBOARDING_AREA IS NOT NULL
            GROUP BY B.ONBOARDING_AREA
            ORDER BY B.ONBOARDING_AREA
        )
        SELECT 
            A.ONBOARDING_AREA || B.ONBOARDING_AREA AS CITY_DETAILED_COMBO,
            A.ONBOARDING_AREA AS CITY_DETAILED_1, 
            B.ONBOARDING_AREA AS CITY_DETAILED_2, 
            A.GEO_LAT AS CITY_DETAILED_1_LAT,
            A.GEO_LONG AS CITY_DETAILED_1_LONG,
            B.GEO_LAT AS CITY_DETAILED_2_LAT,
            B.GEO_LONG AS CITY_DETAILED_2_LONG,
            ROUND(haversine(A.GEO_LAT, A.GEO_LONG, B.GEO_LAT, B.GEO_LONG), 0) AS DISTANCE_KM,
            CASE WHEN ROUND(haversine(A.GEO_LAT, A.GEO_LONG, B.GEO_LAT, B.GEO_LONG), 0) > 20 THEN 'FAR'
                ELSE 'NEAR'
            END AS DISTANCE_CATEGORY 
        FROM city_list A
        CROSS JOIN city_list B
        ORDER BY CITY_DETAILED_COMBO
        )

;
 SELECT * FROM CITY_DISTANCES WHERE CITY_DETAILED_1 LIKE 'London%' and CITY_DETAILED_2 LIKE 'London%' order by CITY_DETAILED_1, CITY_DETAILED_2;